name: deploy

on: # 조건 정의
  push: # main 브랜치 push할 경우 발생
    branches:
      - main

jobs: # 할 작업들을 정의
  build: # 작업 이름
    runs-on: ubuntu-latest

    steps:
      # 현재 저장소의 코드를 클론
      - name: Checkout
        uses: actions/checkout@v4

      # Java JDK 21을 설치
      - name: Install Java JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # Gradle 빌드
      - name: Gradle Build
        run: |
          chmod +x gradlew
          ./gradlew clean build

      # Docker 로그인
      - name: Docker Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USER_EMAIL }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile_spring_boot
          push: true
          tags: ${{ secrets.DOCKER_NICKNAME }}/spring-boot-app:latest

      # .env 파일 생성
      - name: Create .env file
        run: |
          echo "DOCKER_NICKNAME=${{ secrets.DOCKER_NICKNAME }}" > .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env

      # .env 파일과 docker compose 파일 EC2로 업로드
      - name: Upload .env file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            ./docker-compose.yml
            ./.env
          target: /home/ubuntu/ci_cd_practice

      # 9. EC2에서 Docker Compose 실행
      - name: Deploy to EC2 with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/ci_cd_practice
            sudo docker-compose down --remove-orphans
            sudo docker image prune -af
            sudo docker-compose pull
            sudo docker-compose up -d --remove-orphans